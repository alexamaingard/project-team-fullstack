generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("DATABASE_SHADOW")
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

model User {
  id        Int       @id @default(autoincrement())
  username  String    @unique
  password  String
  email     String    @unique
  role      Role      @default(USER)
  isBanned  Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  profile   Profile?
  post      Post[]
  comment   Comment[]
  like      Like[]
}

model Profile {
  id             Int      @id @default(autoincrement())
  profilePicture String?
  location       String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  rating         Rating[]
  user           User     @relation(fields: [userId], references: [id])
  userId         Int      @unique
}

model Post {
  id         Int                 @id @default(autoincrement())
  title      String
  content    String
  isReported Boolean             @default(false)
  isRemoved  Boolean             @default(false)
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  user       User?               @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId     Int?
  comment    Comment[]
  categories CategoriesOnPosts[]
  tags       TagsOnPosts[]
  like       Like[]
}

model Comment {
  id         Int      @id @default(autoincrement())
  content    String
  parentId   Int?
  isReported Boolean  @default(false)
  isRemoved  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  post       Post     @relation(fields: [postId], references: [id])
  postId     Int
  user       User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId     Int?
  like       Like[]
}

model Category {
  id        Int                 @id @default(autoincrement())
  name      String              @unique
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  posts     CategoriesOnPosts[]
}

model CategoriesOnPosts {
  id         Int      @id @default(autoincrement())
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int
  post       Post     @relation(fields: [postId], references: [id])
  postId     Int
}

model Tag {
  id        Int           @id @default(autoincrement())
  name      String        @unique
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  posts     TagsOnPosts[]
}

model TagsOnPosts {
  id     Int  @id @default(autoincrement())
  post   Post @relation(fields: [postId], references: [id])
  postId Int
  tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId  Int
}

model Like {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  post      Post?    @relation(fields: [postId], references: [id])
  postId    Int?
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId Int?
}

model Pokemon {
  id             Int                @id @default(autoincrement())
  name           String             @unique
  number         Int
  largeImageUrl  String
  smallImageUrl  String
  types          TypesOnPokemon[]
  baseHP         Int
  baseAttack     Int
  baseDefense    Int
  specialAttack  Int
  specialDefense Int
  speed          Int
  ratings        RatingsOnPokemon[]
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
}

model Type {
  id        Int              @id @default(autoincrement())
  name      String           @unique
  pokemons  TypesOnPokemon[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model Rating {
  id        Int                @id @default(autoincrement())
  rating    Int
  profile   Profile            @relation(fields: [profileId], references: [id])
  profileId Int
  pokemons  RatingsOnPokemon[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model TypesOnPokemon {
  id        Int     @id @default(autoincrement())
  type      Type    @relation(fields: [typeId], references: [id])
  typeId    Int
  pokemon   Pokemon @relation(fields: [pokemonId], references: [id])
  pokemonId Int
}

model RatingsOnPokemon {
  id        Int     @id @default(autoincrement())
  rating    Rating  @relation(fields: [ratingId], references: [id])
  ratingId  Int
  pokemon   Pokemon @relation(fields: [pokemonId], references: [id])
  pokemonId Int
}
